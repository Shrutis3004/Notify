'use strict';

var Joi = require('joi');

var Utils = require('../utils');

var _require = require('../validators'),
    SessionSchema = _require.SessionSchema,
    SessionTimeSchema = _require.SessionTimeSchema,
    IdSchema = _require.IdSchema;

module.exports = function (axios) {
  return {
    /**
     * Start a session for a player
     *
     * @param {Strinng} playerId Player's ID
     * @param {Session} data Session Object see https://documentation.onesignal.com/reference#new-session
     * @param {Function} callback Callback function for backwards compatibility
     * @returns {Promise}
     */
    newSession: function newSession(playerId, data, callback) {
      var sessionError = Joi.validate(data, SessionSchema).error;

      if (sessionError) {
        throw sessionError;
      }

      var playerIdError = Joi.validate(playerId, IdSchema).error;

      if (playerIdError) {
        throw playerIdError;
      }

      if (!callback || !Utils.isFunction(callback)) {
        callback = function callback() {};
      }
      return axios.post('/players/' + playerId + '/on_session', data).then(function (response) {
        callback(null, response.data);
        return response.data;
      }).catch(function (err) {
        callback(err, null);
        return err;
      });
    },


    /**
     * Update a device's session length
     *
     * @param {String} playerId Player's ID
     * @param {Number} activeTime Duration in seconds since the app was last in focus
     * @param {Function} callback Callback function for backwards compatibility
     * @returns {Promise}
     */
    incrementSessionTime: function incrementSessionTime(playerId, activeTime, callback) {
      var data = {
        active_time: activeTime,
        state: 'ping'
      };
      var sessionError = Joi.validate(data, SessionTimeSchema).error;

      if (sessionError) {
        throw sessionError;
      }

      if (!callback || !Utils.isFunction(callback)) {
        callback = function callback() {};
      }
      return axios.post('/players/' + playerId + '/on_focus', data).then(function (response) {
        callback(null, response.data);
        return response.data;
      }).catch(function (err) {
        callback(err, null);
        return err;
      });
    }
  };
};